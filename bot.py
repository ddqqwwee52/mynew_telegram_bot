import os
import logging
import google.generativeai as genai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ö–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ (—Ä—É–±–ª–∏)
SUBSCRIPTION_PRICES = {
    'week': 199,
    'month': 599, 
    '3months': 1499,
    '6months': 2499
}

# –¢–í–û–ò –ö–†–ò–ü–¢–û-–ö–û–®–ï–õ–¨–ö–ò
CRYPTO_ADDRESSES = {
    'usdt': 'TTPyQybNxws84CbLZqjxptJa1fNoDYzgex',
    'btc': 'bc1qre29jcpyfpkden3c3l5yjymrqqjjvp57m6amvq', 
    'ton': 'UQDjZ3wu-ZziQb_Y5K9utUqbhML0dH7UTol_5AXOcsTHMfk7'
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)
user_limits = {}
user_subscriptions = {}

def get_user_limits(user_id):
    if user_id not in user_limits:
        user_limits[user_id] = {'text_used': 0, 'image_used': 0}
    return user_limits[user_id]

def is_premium(user_id):
    return user_id in user_subscriptions

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscription_keyboard():
    keyboard = [
        [InlineKeyboardButton("üí∞ –ù–ï–î–ï–õ–Ø - 199 —Ä—É–±.", callback_data="sub_week")],
        [InlineKeyboardButton("üíé –ú–ï–°–Ø–¶ - 599 —Ä—É–±.", callback_data="sub_month")],
        [InlineKeyboardButton("üöÄ 3 –ú–ï–°–Ø–¶–ê - 1499 —Ä—É–±.", callback_data="sub_3months")],
        [InlineKeyboardButton("üî• 6 –ú–ï–°–Ø–¶–ï–í - 2499 —Ä—É–±.", callback_data="sub_6months")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
def get_payment_method_keyboard(subscription_type):
    keyboard = [
        [InlineKeyboardButton("üí≥ –ÆKassa (–∫–∞—Ä—Ç–∞)", callback_data=f"pay_ykassa_{subscription_type}")],
        [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"pay_crypto_{subscription_type}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_subs")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def get_crypto_keyboard(subscription_type):
    keyboard = [
        [InlineKeyboardButton("USDT (TRC20)", callback_data=f"crypto_usdt_{subscription_type}")],
        [InlineKeyboardButton("BTC (Bitcoin)", callback_data=f"crypto_btc_{subscription_type}")],
        [InlineKeyboardButton("TON (Toncoin)", callback_data=f"crypto_ton_{subscription_type}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_pay_{subscription_type}")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    limits = get_user_limits(user.id)
    
    text_remaining = 15 - limits['text_used']
    image_remaining = 5 - limits['image_used']
    
    premium_status = "‚≠ê –ê–ö–¢–ò–í–ù–ê –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê" if is_premium(user.id) else "üé´ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –î–û–°–¢–£–ü"
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ Gemini!

{premium_status}

üìä –õ–∏–º–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {text_remaining}/15
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_remaining}/5

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
/image –æ–ø–∏—Å–∞–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/subscribe - –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
"""
    await update.message.reply_text(welcome_text)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    limits = get_user_limits(user.id)
    
    text_remaining = 15 - limits['text_used']
    image_remaining = 5 - limits['image_used']
    
    stats_text = f"""
üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {limits['text_used']}/15
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {limits['image_used']}/5

–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {text_remaining}
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_remaining}

–°—Ç–∞—Ç—É—Å: {'‚≠ê –ü–†–ï–ú–ò–£–ú' if is_premium(user.id) else 'üé´ –ë–ï–°–ü–õ–ê–¢–ù–´–ô'}
"""
    await update.message.reply_text(stats_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_message = update.message.text
    limits = get_user_limits(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_premium(user.id) and limits['text_used'] >= 15:
        await update.message.reply_text(
            "‚ùå –ë–ï–°–ü–õ–ê–¢–ù–´–ô –õ–ò–ú–ò–¢ –ò–°–ß–ï–†–ü–ê–ù\n\n"
            "üîÑ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞\n"
            "üöÄ –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –ë–ï–ó–õ–ò–ú–ò–¢–ù–£–Æ –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    try:
        if not is_premium(user.id):
            limits['text_used'] += 1
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini
        response = model.generate_content(user_message)
        bot_reply = response.text
        
        if is_premium(user.id):
            await update.message.reply_text(bot_reply)
        else:
            text_remaining = 15 - limits['text_used']
            await update.message.reply_text(f"{bot_reply}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {text_remaining}/15")
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    limits = get_user_limits(user.id)
    
    if not is_premium(user.id) and limits['image_used'] >= 5:
        await update.message.reply_text(
            "‚ùå –õ–ò–ú–ò–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ò–°–ß–ï–†–ü–ê–ù\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    await update.message.reply_text(
        "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é! –ê –ø–æ–∫–∞ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ ü§ó"
    )

# –ü–æ–¥–ø–∏—Å–∫–∞
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_premium(update.effective_user.id):
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!")
        return
        
    subscribe_text = """
üöÄ –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê

–ü–æ–ª—É—á–∏—Ç–µ –ü–û–õ–ù–´–ô –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ô –î–û–°–¢–£–ü:

‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

üí∞ –í–´–ë–ï–†–ò–¢–ï –ü–ï–†–ò–û–î:
"""
    await update.message.reply_text(subscribe_text, reply_markup=get_subscription_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user = query.from_user
    
    # –°–ª–æ–≤–∞—Ä–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    sub_names = {
        'week': '–ù–ï–î–ï–õ–Æ',
        'month': '–ú–ï–°–Ø–¶', 
        '3months': '3 –ú–ï–°–Ø–¶–ê',
        '6months': '6 –ú–ï–°–Ø–¶–ï–í'
    }
    
    # –°–ª–æ–≤–∞—Ä–∏ —Å —Ü–µ–Ω–∞–º–∏
    sub_prices = SUBSCRIPTION_PRICES
    
    # –°–ª–æ–≤–∞—Ä–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    crypto_names = {
        'usdt': 'USDT (TRC20)',
        'btc': 'BTC (Bitcoin)',
        'ton': 'TON (Toncoin)'
    }
    
    # –í—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ ‚Üí –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    if data.startswith('sub_'):
        sub_type = data.replace('sub_', '')
        sub_name = sub_names[sub_type]
        price = sub_prices[sub_type]
        
        payment_text = f"""
üí≥ –í–´–ë–û–† –°–ü–û–°–û–ë–ê –û–ü–õ–ê–¢–´

–ü–æ–¥–ø–∏—Å–∫–∞: {sub_name}
–°—É–º–º–∞: {price} —Ä—É–±.

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
"""
        await query.edit_message_text(payment_text, reply_markup=get_payment_method_keyboard(sub_type))
    
    # –í—ã–±–æ—Ä –ÆKassa
    elif data.startswith('pay_ykassa_'):
        sub_type = data.replace('pay_ykassa_', '')
        price = sub_prices[sub_type]
        
        ykassa_text = f"""
üí≥ –û–ü–õ–ê–¢–ê –ß–ï–†–ï–ó –ÆKASSA

–ü–æ–¥–ø–∏—Å–∫–∞: {sub_names[sub_type]}
–°—É–º–º–∞: {price} —Ä—É–±.

‚ö° –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: 
(–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa)

üìû –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç: @NeuroAssistant_Support
‚è±Ô∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!
"""
        await query.edit_message_text(ykassa_text)
    
    # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    elif data.startswith('pay_crypto_'):
        sub_type = data.replace('pay_crypto_', '')
        
        crypto_text = f"""
‚Çø –û–ü–õ–ê–¢–ê –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–û–ô

–ü–æ–¥–ø–∏—Å–∫–∞: {sub_names[sub_type]}
–°—É–º–º–∞: {sub_prices[sub_type]} —Ä—É–±.

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:
"""
        await query.edit_message_text(crypto_text, reply_markup=get_crypto_keyboard(sub_type))
    
    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    elif data.startswith('crypto_'):
        parts = data.split('_')
        crypto_type = parts[1]  # usdt, btc, ton
        sub_type = parts[2]     # week, month, etc
        
        address = CRYPTO_ADDRESSES[crypto_type]
        crypto_name = crypto_names[crypto_type]
        price = sub_prices[sub_type]
        sub_name = sub_names[sub_type]
        
        crypto_payment_text = f"""
‚Çø –û–ü–õ–ê–¢–ê {crypto_name}

–ü–æ–¥–ø–∏—Å–∫–∞: {sub_name}
–°—É–º–º–∞: {price} —Ä—É–±.

üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:
`{address}`

üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {price} —Ä—É–±. –≤ {crypto_name} –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
3. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç: @NeuroAssistant_Support
4. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: 
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
"""
        await query.edit_message_text(crypto_payment_text, parse_mode='Markdown')
    
    # –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
    elif data.startswith('back_to_pay_'):
        sub_type = data.replace('back_to_pay_', '')
        await query.edit_message_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
                                    reply_markup=get_payment_method_keyboard(sub_type))
    
    # –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º
    elif data == 'back_to_subs':
        await query.edit_message_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:", 
                                    reply_markup=get_subscription_keyboard())

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("image", handle_image))
    
    # –°–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ö–Ω–æ–ø–∫–∏ (–û–î–ò–ù –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö)
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling()

if __name__ == '__main__':
    main()
