import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import google.generativeai as genai

from config import Config
from database import DatabaseManager
from subscription_service import SubscriptionService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=Config.GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

class BotHandlers:
    def __init__(self):
        pass

    async def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            db.create_user(user.id, user.username)
            
            welcome_text = (
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
                "–Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é Google Gemini. "
                "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏:\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç\n‚Ä¢ –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏\n‚Ä¢ –û–±—Å—É–¥–∏—Ç—å –∏–¥–µ–∏\n\n"
                f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {Config.FREE_REQUESTS_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏\n"
                "üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–æ–º–æ–≥—É!"
            )
            
            await update.message.reply_text(welcome_text)
            logger.info(f"User {user.id} started the bot")
        except Exception as e:
            logger.error(f"Error in start command: {e}")

    async def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user = update.effective_user
            user_message = update.message.text
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = db.get_user(user.id)
            if not user_data:
                db.create_user(user.id, user.username)
                user_data = db.get_user(user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            if not SubscriptionService.can_make_free_request(user_data):
                await self.show_subscription_menu(update, context)
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await update.message.chat.send_action(action="typing")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
            response = model.generate_content(user_message)
            response_text = response.text if response else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
            db.save_request(user.id, user_message, response_text)
            db.update_request_count(user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(
                response_text,
                reply_to_message_id=update.message.message_id
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
            remaining = SubscriptionService.get_remaining_requests(user_data)
            if remaining != float('inf'):
                await update.message.reply_text(
                    f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining}",
                    reply_to_message_id=update.message.message_id + 1
                )
                
        except Exception as e:
            logger.error(f"Error handling message: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def show_subscription_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            keyboard = [
                [InlineKeyboardButton("üí≥ –ù–µ–¥–µ–ª—è - 89‚ÇΩ", callback_data="sub_week")],
                [InlineKeyboardButton("üí≥ –ú–µ—Å—è—Ü - 299‚ÇΩ", callback_data="sub_month")],
                [InlineKeyboardButton("üí≥ 3 –º–µ—Å—è—Ü–∞ - 549‚ÇΩ", callback_data="sub_3month")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = (
                "üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!\n\n"
                "üíé –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:\n"
                f"‚Ä¢ –ù–µ–¥–µ–ª—è: {Config.SUBSCRIPTION_PRICES['week']['price']}‚ÇΩ\n"
                f"‚Ä¢ –ú–µ—Å—è—Ü: {Config.SUBSCRIPTION_PRICES['month']['price']}‚ÇΩ\n"
                f"‚Ä¢ 3 –º–µ—Å—è—Ü–∞: {Config.SUBSCRIPTION_PRICES['3month']['price']}‚ÇΩ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:"
            )
            
            if update.message:
                await update.message.reply_text(text, reply_markup=reply_markup)
            else:
                await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error showing subscription menu: {e}")

    async def handle_subscription_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()
            
            user = query.from_user
            subscription_type = query.data.replace('sub_', '')
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription_info = Config.SUBSCRIPTION_PRICES.get(subscription_type)
            if subscription_info:
                days = subscription_info['days']
                db.add_subscription(user.id, days)
                price = subscription_info['price']
                
                success_text = (
                    f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!\n"
                    f"üíé –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤!\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º."
                )
                
                await query.edit_message_text(success_text)
                logger.info(f"User {user.id} purchased {subscription_type} subscription")
            else:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
        except Exception as e:
            logger.error(f"Error handling subscription callback: {e}")

    async def stats(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = update.effective_user
            user_data = db.get_user(user.id)
            
            if not user_data:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            remaining = SubscriptionService.get_remaining_requests(user_data)
            has_subscription = SubscriptionService.has_active_subscription(user_data)
            
            stats_text = (
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
                f"üÜî ID: {user.id}\n"
                f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data['created_at'][:10]}\n\n"
            )
            
            if has_subscription:
                subscription_end = user_data['subscription_end']
                stats_text += (
                    f"üíé –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {subscription_end}\n"
                    f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n"
                )
            else:
                stats_text += (
                    f"üíé –°—Ç–∞—Ç—É—Å: –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                    f"üî¢ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining}/{Config.FREE_REQUESTS_LIMIT}\n"
                    f"üìÖ –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å: –ó–∞–≤—Ç—Ä–∞\n"
                )
            
            await update.message.reply_text(stats_text)
        except Exception as e:
            logger.error(f"Error showing stats: {e}")
